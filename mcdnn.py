import cv2

import numpy as np
import tensorflow as tf

from tensorflow import keras

from fn import processPaper
from model import formatDataset   

# preprocess input character to fit into model input
# character <- img to be preprocessed
def preprocessCharacter(character):
	# invert
	character = cv2.bitwise_not(character)

	# normalize pixel values
	character = character/255

	# reshape to fit model input shape
	character = np.expand_dims(character, axis=0)
	character = np.expand_dims(character, axis=3)
	character.reshape((1, 28, 28, 1))

	return character
# returns:
# character <- preprocessed character

# predict input character with input model
# model <- the model to read the character with
# character <- img to be recognized
def readCharacter(model, character):
	# generate predictions
	predictions = model.predict(character)

	# get the best prediction
	predicted_value = str(np.argmax(predictions))

	return predictions, predicted_value
# returns:
# predictions <- predictions generated by the model
# predicted_value <- the most probable classification of the character

if __name__ == '__main__':

	# needed for the models to work
	mean_px, std_px = formatDataset()

	# models trained on dataset with
	# normalized pixel values
	# black background, white foreground
	models = [keras.models.load_model('./models/w_m'+str(i)+'_eF.h5') for i in range(10)]

	scanned = "./in/v6/v6.png"  
	scanned = cv2.imread(scanned, 0)

	# extract cleaned fields
	paper = processPaper(scanned, show=False)

	for field in paper:
	    txt = ""
	    for character in field:
	        print("")
	        
	        cv2.imshow("character.png", character)

	        character = preprocessCharacter(character)

	        for i in range(len(models)):
	            p, c = readCharacter(models[i], character)
	            print("Model #"+str(i)+" prediction: "+str(c))

	        cv2.waitKey(0)

	    print(txt)

	cv2.destroyAllWindows()