import cv2
import os
import pickle

import numpy as np
import tensorflow as tf

from collections import Counter
from tensorflow import keras

def load_model_vars():
	return pickle.load(open(os.path.join('.','models','vars.pkl'), 'rb'))

# n <- number of models to be loaded.
#		more accurate but slower if higher
#		max of 10.
def load_models(n=10, show=False):
	models = []
	for i in range(n):
		model = keras.models.load_model(os.path.join('.','models',('m'+str(i)+'eF.h5')))
		models.append(model)
		if show == True:
			print("Model "+str(i)+" loaded")
			model.summary()

	return models

# preprocess input character to fit into model input
# character <- img to be preprocessed
def preprocess_character(character):
	# invert
	character = cv2.bitwise_not(character)

	# normalize pixel values
	character = character/255

	# reshape to fit model input shape
	character = np.expand_dims(character, axis=0)
	character = np.expand_dims(character, axis=3)
	character.reshape((1, 28, 28, 1))

	return character
# returns:
# character <- preprocessed character

# predict input character with input models
# models <- the models to read the character with
# character <- img to be recognized
def read_character(models, character):
	character = preprocess_character(character)

	predictions = []
	predicted_values = []

	for model in models:
		# generate predictions
		prediction = model.predict(character)

		# get the best prediction
		predicted_value = str(np.argmax(prediction))

		# append
		predictions.append(prediction)
		predicted_values.append(predicted_value)

	predicted_character = Counter(predicted_values).most_common(1)[0][0]

	return predictions, predicted_values, predicted_character
# returns:
# predictions <- predictions generated by the model
# predicted_values <- the most probable classification of the character by model
# predicted_character <- the character most voted by the models
